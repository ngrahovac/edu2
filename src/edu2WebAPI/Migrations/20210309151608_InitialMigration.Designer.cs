// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using edu2WebAPI.Data;

namespace edu2WebAPI.Migrations
{
    [DbContext(typeof(Edu2DbContext))]
    [Migration("20210309151608_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ProjectTag");
                });

            modelBuilder.Entity("TagUserSettings", b =>
                {
                    b.Property<int>("UserSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("UserTagsId")
                        .HasColumnType("int");

                    b.HasKey("UserSettingsId", "UserTagsId");

                    b.HasIndex("UserTagsId");

                    b.ToTable("TagUserSettings");
                });

            modelBuilder.Entity("edu2Domain.CollaboratorProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CollaboratorProfile");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CollaboratorProfile");
                });

            modelBuilder.Entity("edu2Domain.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("edu2Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudyFieldId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("StudyFieldId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("edu2Domain.ProjectApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicantComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CollaboratorProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectApplicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("CollaboratorProfileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectApplications");
                });

            modelBuilder.Entity("edu2Domain.Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Social");
                });

            modelBuilder.Entity("edu2Domain.StudyField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("Key", 0)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudyFields");
                });

            modelBuilder.Entity("edu2Domain.StudyProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cycle")
                        .HasColumnType("int");

                    b.Property<int>("DurationYears")
                        .HasColumnType("int");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("StudyProgram");
                });

            modelBuilder.Entity("edu2Domain.StudyProgramSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudyProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("StudyProgramSpecialization");
                });

            modelBuilder.Entity("edu2Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("Key", 0)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("edu2Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingsId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("edu2Domain.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CvLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("PhoneVisible")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProjectsVisible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("edu2Domain.UserSocials", b =>
                {
                    b.Property<int>("SocialId")
                        .HasColumnType("int");

                    b.Property<int>("UserSettingsId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocialId", "UserSettingsId");

                    b.HasIndex("UserSettingsId");

                    b.ToTable("UserSocials");
                });

            modelBuilder.Entity("edu2WebAPI.Auth.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserAccountType")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("edu2Domain.FacultyMemberProfile", b =>
                {
                    b.HasBaseType("edu2Domain.CollaboratorProfile");

                    b.Property<int?>("StudyFieldId")
                        .HasColumnType("int");

                    b.HasIndex("StudyFieldId");

                    b.HasDiscriminator().HasValue("FacultyMemberProfile");
                });

            modelBuilder.Entity("edu2Domain.StudentProfile", b =>
                {
                    b.HasBaseType("edu2Domain.CollaboratorProfile");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyCycle")
                        .HasColumnType("int");

                    b.Property<int?>("StudyProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyProgramSpecializationId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyYear")
                        .HasColumnType("int");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudyProgramId");

                    b.HasIndex("StudyProgramSpecializationId");

                    b.HasDiscriminator().HasValue("StudentProfile");
                });

            modelBuilder.Entity("edu2Domain.FacultyMember", b =>
                {
                    b.HasBaseType("edu2Domain.User");

                    b.Property<int>("AcademicRank")
                        .HasColumnType("int");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasColumnName("FacultyMember_FacultyId");

                    b.Property<int?>("StudyFieldId")
                        .HasColumnType("int");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudyFieldId");

                    b.HasDiscriminator().HasValue("FacultyMember");
                });

            modelBuilder.Entity("edu2Domain.Student", b =>
                {
                    b.HasBaseType("edu2Domain.User");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("StudyProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyProgramSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("StudyYear")
                        .HasColumnType("int");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudyProgramId");

                    b.HasIndex("StudyProgramSpecializationId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.HasOne("edu2Domain.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edu2Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagUserSettings", b =>
                {
                    b.HasOne("edu2Domain.UserSettings", null)
                        .WithMany()
                        .HasForeignKey("UserSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edu2Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("UserTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("edu2Domain.CollaboratorProfile", b =>
                {
                    b.HasOne("edu2Domain.Project", "Project")
                        .WithMany("CollaboratorProfiles")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("edu2Domain.Project", b =>
                {
                    b.HasOne("edu2Domain.User", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("edu2Domain.StudyField", "StudyField")
                        .WithMany()
                        .HasForeignKey("StudyFieldId");

                    b.Navigation("StudyField");
                });

            modelBuilder.Entity("edu2Domain.ProjectApplication", b =>
                {
                    b.HasOne("edu2Domain.User", null)
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edu2Domain.CollaboratorProfile", null)
                        .WithMany()
                        .HasForeignKey("CollaboratorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edu2Domain.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("edu2Domain.StudyProgram", b =>
                {
                    b.HasOne("edu2Domain.Faculty", null)
                        .WithMany("StudyPrograms")
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("edu2Domain.StudyProgramSpecialization", b =>
                {
                    b.HasOne("edu2Domain.StudyProgram", null)
                        .WithMany("ProgramSpecializations")
                        .HasForeignKey("StudyProgramId");
                });

            modelBuilder.Entity("edu2Domain.User", b =>
                {
                    b.HasOne("edu2Domain.UserSettings", "UserSettings")
                        .WithMany()
                        .HasForeignKey("UserSettingsId");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("edu2Domain.UserSocials", b =>
                {
                    b.HasOne("edu2Domain.Social", "Social")
                        .WithMany("UserSocials")
                        .HasForeignKey("SocialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edu2Domain.UserSettings", "UserSettings")
                        .WithMany("UserSocials")
                        .HasForeignKey("UserSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Social");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("edu2Domain.FacultyMemberProfile", b =>
                {
                    b.HasOne("edu2Domain.StudyField", "StudyField")
                        .WithMany()
                        .HasForeignKey("StudyFieldId");

                    b.Navigation("StudyField");
                });

            modelBuilder.Entity("edu2Domain.StudentProfile", b =>
                {
                    b.HasOne("edu2Domain.Faculty", null)
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("edu2Domain.StudyProgram", null)
                        .WithMany()
                        .HasForeignKey("StudyProgramId");

                    b.HasOne("edu2Domain.StudyProgramSpecialization", null)
                        .WithMany()
                        .HasForeignKey("StudyProgramSpecializationId");
                });

            modelBuilder.Entity("edu2Domain.FacultyMember", b =>
                {
                    b.HasOne("edu2Domain.Faculty", null)
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("edu2Domain.StudyField", "StudyField")
                        .WithMany()
                        .HasForeignKey("StudyFieldId");

                    b.Navigation("StudyField");
                });

            modelBuilder.Entity("edu2Domain.Student", b =>
                {
                    b.HasOne("edu2Domain.Faculty", null)
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("edu2Domain.StudyProgram", null)
                        .WithMany()
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("edu2Domain.StudyProgramSpecialization", null)
                        .WithMany()
                        .HasForeignKey("StudyProgramSpecializationId");
                });

            modelBuilder.Entity("edu2Domain.Faculty", b =>
                {
                    b.Navigation("StudyPrograms");
                });

            modelBuilder.Entity("edu2Domain.Project", b =>
                {
                    b.Navigation("CollaboratorProfiles");
                });

            modelBuilder.Entity("edu2Domain.Social", b =>
                {
                    b.Navigation("UserSocials");
                });

            modelBuilder.Entity("edu2Domain.StudyProgram", b =>
                {
                    b.Navigation("ProgramSpecializations");
                });

            modelBuilder.Entity("edu2Domain.UserSettings", b =>
                {
                    b.Navigation("UserSocials");
                });
#pragma warning restore 612, 618
        }
    }
}
